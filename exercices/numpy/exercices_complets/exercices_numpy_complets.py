"""
üéØ EXERCICES NUMPY COMPLETS
Reprend tous les concepts vus dans le cours NumPy Operations

Sections couvertes :
1. Cr√©ation d'arrays et op√©rations arithm√©tiques
2. Fonctions NumPy (cr√©ation, manipulation, math√©matiques, statistiques)
3. Op√©rations de comparaison et logiques
4. Fonctions math√©matiques (trigonom√©triques, arrondis)
5. Constantes NumPy
6. Fonctions statistiques avanc√©es
7. Fonctions pour cha√Ænes de caract√®res

üí° Instructions : Compl√©tez les fonctions en rempla√ßant les 'pass' et 'None'
"""

import numpy as np

# ===============================
# SECTION 1: OP√âRATIONS ARITHM√âTIQUES
# ===============================

def exercice_1_operations_arithmetiques():
    """
    Exercice 1: Ma√Ætriser les op√©rations arithm√©tiques element-wise
    """
    print("=== EXERCICE 1: Op√©rations Arithm√©tiques ===")
    
    # Cr√©ez deux arrays pour les tests
    array_a = np.array([10, 20, 30, 40])
    array_b = np.array([2, 4, 6, 8])
    
    print(f"Array A: {array_a}")
    print(f"Array B: {array_b}")
    
    # 1.1 Addition avec op√©rateur et fonction
    # TODO: Utilisez + et np.add()
    addition_op = None
    addition_func = None
    
    # 1.2 Soustraction avec op√©rateur et fonction  
    # TODO: Utilisez - et np.subtract()
    soustraction_op = None
    soustraction_func = None
    
    # 1.3 Multiplication avec op√©rateur et fonction
    # TODO: Utilisez * et np.multiply()
    multiplication_op = None
    multiplication_func = None
    
    # 1.4 Division avec op√©rateur et fonction
    # TODO: Utilisez / et np.divide()
    division_op = None
    division_func = None
    
    # 1.5 Puissance avec op√©rateur et fonction
    # TODO: √âlevez array_a √† la puissance 2 avec ** et np.power()
    puissance_op = None
    puissance_func = None
    
    # 1.6 Modulo avec op√©rateur et fonction
    # TODO: Utilisez % et np.mod()
    modulo_op = None
    modulo_func = None
    
    # Affichage des r√©sultats
    try:
        print(f"‚úÖ Addition: {addition_op} = {addition_func}")
        print(f"‚úÖ Soustraction: {soustraction_op} = {soustraction_func}")
        print(f"‚úÖ Multiplication: {multiplication_op} = {multiplication_func}")
        print(f"‚úÖ Division: {division_op} = {division_func}")
        print(f"‚úÖ Puissance: {puissance_op} = {puissance_func}")
        print(f"‚úÖ Modulo: {modulo_op} = {modulo_func}")
    except:
        print("‚ùå Il y a encore des TODO √† compl√©ter!")

# ===============================
# SECTION 2: FONCTIONS DE CR√âATION ET MANIPULATION
# ===============================

def exercice_2_fonctions_creation_manipulation():
    """
    Exercice 2: Fonctions de cr√©ation et manipulation d'arrays
    """
    print("\n=== EXERCICE 2: Cr√©ation et Manipulation ===")
    
    # 2.1 Cr√©ation d'arrays
    # TODO: Cr√©ez les arrays suivants
    array_zeros = None  # Array 3x4 de z√©ros
    array_ones = None   # Array 2x3 de uns
    array_range = None  # Array de 0 √† 15
    array_random = None # Array 2x2 de nombres al√©atoires
    
    # 2.2 Manipulation d'arrays
    data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
    
    # TODO: Reshape data en array 3x4
    data_2d = None
    
    # TODO: Transposez data_2d
    data_transposed = None
    
    try:
        print(f"‚úÖ Zeros shape: {array_zeros.shape}")
        print(f"‚úÖ Ones shape: {array_ones.shape}")
        print(f"‚úÖ Range: {array_range}")
        print(f"‚úÖ Random shape: {array_random.shape}")
        print(f"‚úÖ Data 2D shape: {data_2d.shape}")
        print(f"‚úÖ Transposed shape: {data_transposed.shape}")
    except:
        print("‚ùå Il y a encore des TODO √† compl√©ter!")

# ===============================
# SECTION 3: OP√âRATIONS DE COMPARAISON ET LOGIQUES
# ===============================

def exercice_3_comparaison_logique():
    """
    Exercice 3: Op√©rations de comparaison et logiques
    """
    print("\n=== EXERCICE 3: Comparaison et Logique ===")
    
    array1 = np.array([1, 5, 3, 8, 2])
    array2 = np.array([2, 4, 3, 6, 7])
    
    print(f"Array 1: {array1}")
    print(f"Array 2: {array2}")
    
    # 3.1 Comparaisons avec op√©rateurs
    # TODO: Utilisez les op√©rateurs <, >, ==, !=
    moins_que = None
    plus_que = None
    egal = None
    different = None
    
    # 3.2 Comparaisons avec fonctions
    # TODO: Utilisez np.less(), np.greater(), np.equal(), np.not_equal()
    moins_que_func = None
    plus_que_func = None
    egal_func = None
    different_func = None
    
    # 3.3 Op√©rations logiques
    bool_array1 = np.array([True, False, True, False])
    bool_array2 = np.array([False, False, True, True])
    
    # TODO: Utilisez np.logical_and(), np.logical_or(), np.logical_not()
    logical_and = None
    logical_or = None
    logical_not = None
    
    try:
        print(f"‚úÖ Moins que: {moins_que}")
        print(f"‚úÖ Plus que: {plus_que}")
        print(f"‚úÖ √âgal: {egal}")
        print(f"‚úÖ Diff√©rent: {different}")
        print(f"‚úÖ AND: {logical_and}")
        print(f"‚úÖ OR: {logical_or}")
        print(f"‚úÖ NOT: {logical_not}")
    except:
        print("‚ùå Il y a encore des TODO √† compl√©ter!")

# ===============================
# SECTION 4: FONCTIONS MATH√âMATIQUES
# ===============================

def exercice_4_fonctions_mathematiques():
    """
    Exercice 4: Fonctions math√©matiques (trigonom√©triques, arrondis)
    """
    print("\n=== EXERCICE 4: Fonctions Math√©matiques ===")
    
    # 4.1 Fonctions trigonom√©triques
    angles_rad = np.array([0, np.pi/6, np.pi/4, np.pi/3, np.pi/2])
    angles_deg = np.array([0, 30, 45, 60, 90])
    
    # TODO: Calculez sin, cos, tan des angles en radians
    sin_vals = None
    cos_vals = None
    tan_vals = None
    
    # TODO: Convertissez angles_deg en radians et angles_rad en degr√©s
    deg_to_rad = None
    rad_to_deg = None
    
    # 4.2 Fonctions d'arrondi
    decimals = np.array([1.23456, 2.67891, 3.14159, 4.99999])
    
    # TODO: Utilisez np.round(), np.floor(), np.ceil()
    rounded_2_dec = None  # Arrondi √† 2 d√©cimales
    floor_vals = None     # Arrondi vers le bas
    ceil_vals = None      # Arrondi vers le haut
    
    try:
        print(f"‚úÖ Sinus: {sin_vals}")
        print(f"‚úÖ Cosinus: {cos_vals}")
        print(f"‚úÖ Degr√©s vers radians: {deg_to_rad}")
        print(f"‚úÖ Arrondi 2 d√©cimales: {rounded_2_dec}")
        print(f"‚úÖ Floor: {floor_vals}")
        print(f"‚úÖ Ceil: {ceil_vals}")
    except:
        print("‚ùå Il y a encore des TODO √† compl√©ter!")

# ===============================
# SECTION 5: CONSTANTES NUMPY
# ===============================

def exercice_5_constantes():
    """
    Exercice 5: Utilisation des constantes NumPy
    """
    print("\n=== EXERCICE 5: Constantes NumPy ===")
    
    # 5.1 Calculs avec pi
    rayon = 5
    # TODO: Calculez la circonf√©rence et l'aire d'un cercle
    circonference = None  # 2 * pi * rayon
    aire = None          # pi * rayon¬≤
    
    # 5.2 Calculs avec e
    x = 2
    # TODO: Calculez e^x et utilisez la constante e
    exp_x = None         # e^x avec np.exp()
    e_constant = None    # La valeur de e
    
    # 5.3 Op√©rations avec constantes et arrays
    array_vals = np.array([1, 2, 3, 4])
    # TODO: Ajoutez pi √† chaque √©l√©ment, multipliez par e
    array_plus_pi = None
    array_fois_e = None
    
    try:
        print(f"‚úÖ Circonf√©rence (r={rayon}): {circonference:.2f}")
        print(f"‚úÖ Aire (r={rayon}): {aire:.2f}")
        print(f"‚úÖ e^{x}: {exp_x:.2f}")
        print(f"‚úÖ Constante e: {e_constant:.2f}")
        print(f"‚úÖ Array + œÄ: {array_plus_pi}")
        print(f"‚úÖ Array √ó e: {array_fois_e}")
    except:
        print("‚ùå Il y a encore des TODO √† compl√©ter!")

# ===============================
# SECTION 6: FONCTIONS STATISTIQUES
# ===============================

def exercice_6_statistiques():
    """
    Exercice 6: Fonctions statistiques avanc√©es
    """
    print("\n=== EXERCICE 6: Statistiques ===")
    
    # Donn√©es pour les tests
    notes = np.array([12, 15, 18, 14, 16, 13, 17, 19, 11, 20])
    matrix_data = np.array([[10, 20, 30], 
                           [40, 50, 60], 
                           [70, 80, 90]])
    
    print(f"Notes: {notes}")
    print(f"Matrix:\n{matrix_data}")
    
    # 6.1 Statistiques de base sur notes
    # TODO: Calculez moyenne, m√©diane, √©cart-type, variance
    moyenne = None
    mediane = None
    ecart_type = None
    variance = None
    min_val = None
    max_val = None
    
    # 6.2 Percentiles
    # TODO: Calculez les 25e, 50e, 75e percentiles
    p25 = None
    p50 = None
    p75 = None
    
    # 6.3 Statistiques sur matrix 2D
    # TODO: Calculez la moyenne par ligne (axis=1) et par colonne (axis=0)
    moyenne_lignes = None
    moyenne_colonnes = None
    
    # TODO: Calculez l'√©cart-type de toute la matrice
    ecart_type_total = None
    
    try:
        print(f"‚úÖ Moyenne: {moyenne:.2f}")
        print(f"‚úÖ M√©diane: {mediane:.2f}")
        print(f"‚úÖ √âcart-type: {ecart_type:.2f}")
        print(f"‚úÖ Min/Max: {min_val}/{max_val}")
        print(f"‚úÖ Percentiles (25,50,75): {p25}, {p50}, {p75}")
        print(f"‚úÖ Moyenne par lignes: {moyenne_lignes}")
        print(f"‚úÖ Moyenne par colonnes: {moyenne_colonnes}")
        print(f"‚úÖ √âcart-type total: {ecart_type_total:.2f}")
    except:
        print("‚ùå Il y a encore des TODO √† compl√©ter!")

# ===============================
# SECTION 7: FONCTIONS CHA√éNES DE CARACT√àRES
# ===============================

def exercice_7_chaines_caracteres():
    """
    Exercice 7: Manipulation de cha√Ænes avec NumPy
    """
    print("\n=== EXERCICE 7: Cha√Ænes de Caract√®res ===")
    
    # 7.1 Manipulation de base
    prenoms = np.array(['alice', 'bob', 'charlie'])
    noms = np.array(['dupont', 'martin', 'durand'])
    
    # TODO: Utilisez les fonctions de cha√Ænes NumPy
    prenoms_maj = None        # Premi√®re lettre en majuscule
    noms_upper = None         # Tout en majuscules
    noms_lower = None         # Tout en minuscules
    
    # 7.2 Concat√©nation et r√©p√©tition
    # TODO: Concat√©nez prenoms et noms avec un espace
    noms_complets = None      # Utilisez np.char.add()
    
    # TODO: R√©p√©tez chaque pr√©nom 3 fois
    prenoms_repetes = None    # Utilisez np.char.multiply()
    
    # 7.3 Comparaison et jointure
    lang1 = np.array(['Python', 'Java', 'C++'])
    lang2 = np.array(['Python', 'JavaScript', 'C++'])
    
    # TODO: Comparez les deux arrays √©l√©ment par √©l√©ment
    langages_egaux = None     # Utilisez np.char.equal()
    
    # TODO: Joignez les caract√®res avec '-'
    lang_joined = None        # Utilisez np.char.join()
    
    try:
        print(f"‚úÖ Pr√©noms capitalis√©s: {prenoms_maj}")
        print(f"‚úÖ Noms majuscules: {noms_upper}")
        print(f"‚úÖ Noms complets: {noms_complets}")
        print(f"‚úÖ Pr√©noms r√©p√©t√©s: {prenoms_repetes}")
        print(f"‚úÖ Langages √©gaux: {langages_egaux}")
        print(f"‚úÖ Langages joints: {lang_joined}")
    except:
        print("‚ùå Il y a encore des TODO √† compl√©ter!")

# ===============================
# EXERCICE BONUS: PROJET INT√âGR√â
# ===============================

def exercice_bonus_projet_integre():
    """
    Exercice Bonus: Projet int√©grant tous les concepts
    Analysez un dataset de temp√©ratures
    """
    print("\n=== EXERCICE BONUS: Analyse de Temp√©ratures ===")
    
    # Simulation de donn√©es m√©t√©o (temp√©ratures en ¬∞C sur 30 jours)
    np.random.seed(42)
    temperatures = np.random.normal(20, 5, 30)  # Moyenne 20¬∞C, √©cart-type 5¬∞C
    villes = np.array(['Paris', 'Lyon', 'Marseille'])
    
    print(f"Temp√©ratures (30 jours): {temperatures[:10]}... (10 premiers)")
    
    # TODO: R√©pondez aux questions suivantes
    
    # 1. Statistiques de base
    temp_moyenne = None
    temp_mediane = None
    temp_min = None
    temp_max = None
    temp_ecart_type = None
    
    # 2. Conversions
    # TODO: Convertissez en Fahrenheit (F = C * 9/5 + 32)
    temperatures_f = None
    
    # 3. Analyse conditionnelle
    # TODO: Trouvez les jours o√π temp > moyenne + √©cart-type (jours chauds)
    jours_chauds = None
    nb_jours_chauds = None
    
    # 4. Transformations math√©matiques
    # TODO: Appliquez une fonction trigonom√©trique pour mod√©liser une variation saisonni√®re
    jours = np.arange(1, 31)
    variation_saisonniere = None  # Utilisez np.sin() avec les jours
    
    # 5. Arrondis et formatage
    # TODO: Arrondissez les temp√©ratures √† 1 d√©cimale
    temperatures_arrondies = None
    
    # 6. Analyse des extr√™mes
    # TODO: Trouvez les indices des temp√©ratures min et max
    indice_temp_min = None
    indice_temp_max = None
    
    try:
        print(f"‚úÖ Temp√©rature moyenne: {temp_moyenne:.1f}¬∞C")
        print(f"‚úÖ Temp√©rature m√©diane: {temp_mediane:.1f}¬∞C")
        print(f"‚úÖ Min/Max: {temp_min:.1f}¬∞C / {temp_max:.1f}¬∞C")
        print(f"‚úÖ √âcart-type: {temp_ecart_type:.1f}¬∞C")
        print(f"‚úÖ Temp√©rature max en Fahrenheit: {temperatures_f[indice_temp_max]:.1f}¬∞F")
        print(f"‚úÖ Nombre de jours chauds: {nb_jours_chauds}")
        print(f"‚úÖ Jour le plus froid: jour {indice_temp_min + 1}")
        print(f"‚úÖ Jour le plus chaud: jour {indice_temp_max + 1}")
    except:
        print("‚ùå Il y a encore des TODO √† compl√©ter!")

# ===============================
# SOLUTIONS (√† d√©commenter pour voir les r√©ponses)
# ===============================

def afficher_solutions():
    """
    Affiche toutes les solutions des exercices
    """
    print("\n" + "="*60)
    print("üî• SOLUTIONS DES EXERCICES üî•")
    print("="*60)
    
    solutions = """
    EXERCICE 1 - SOLUTIONS:
    addition_op = array_a + array_b
    addition_func = np.add(array_a, array_b)
    soustraction_op = array_a - array_b
    soustraction_func = np.subtract(array_a, array_b)
    multiplication_op = array_a * array_b
    multiplication_func = np.multiply(array_a, array_b)
    division_op = array_a / array_b
    division_func = np.divide(array_a, array_b)
    puissance_op = array_a ** 2
    puissance_func = np.power(array_a, 2)
    modulo_op = array_a % array_b
    modulo_func = np.mod(array_a, array_b)
    
    EXERCICE 2 - SOLUTIONS:
    array_zeros = np.zeros((3, 4))
    array_ones = np.ones((2, 3))
    array_range = np.arange(16)
    array_random = np.random.rand(2, 2)
    data_2d = data.reshape(3, 4)
    data_transposed = data_2d.T  # ou np.transpose(data_2d)
    
    EXERCICE 3 - SOLUTIONS:
    moins_que = array1 < array2
    plus_que = array1 > array2
    egal = array1 == array2
    different = array1 != array2
    moins_que_func = np.less(array1, array2)
    plus_que_func = np.greater(array1, array2)
    egal_func = np.equal(array1, array2)
    different_func = np.not_equal(array1, array2)
    logical_and = np.logical_and(bool_array1, bool_array2)
    logical_or = np.logical_or(bool_array1, bool_array2)
    logical_not = np.logical_not(bool_array1)
    
    EXERCICE 4 - SOLUTIONS:
    sin_vals = np.sin(angles_rad)
    cos_vals = np.cos(angles_rad)
    tan_vals = np.tan(angles_rad)
    deg_to_rad = np.radians(angles_deg)
    rad_to_deg = np.degrees(angles_rad)
    rounded_2_dec = np.round(decimals, 2)
    floor_vals = np.floor(decimals)
    ceil_vals = np.ceil(decimals)
    
    EXERCICE 5 - SOLUTIONS:
    circonference = 2 * np.pi * rayon
    aire = np.pi * rayon**2
    exp_x = np.exp(x)
    e_constant = np.e
    array_plus_pi = array_vals + np.pi
    array_fois_e = array_vals * np.e
    
    EXERCICE 6 - SOLUTIONS:
    moyenne = np.mean(notes)
    mediane = np.median(notes)
    ecart_type = np.std(notes)
    variance = np.var(notes)
    min_val = np.min(notes)
    max_val = np.max(notes)
    p25 = np.percentile(notes, 25)
    p50 = np.percentile(notes, 50)
    p75 = np.percentile(notes, 75)
    moyenne_lignes = np.mean(matrix_data, axis=1)
    moyenne_colonnes = np.mean(matrix_data, axis=0)
    ecart_type_total = np.std(matrix_data)
    
    EXERCICE 7 - SOLUTIONS:
    prenoms_maj = np.char.capitalize(prenoms)
    noms_upper = np.char.upper(noms)
    noms_lower = np.char.lower(noms)
    noms_complets = np.char.add(np.char.add(prenoms_maj, ' '), noms_upper)
    prenoms_repetes = np.char.multiply(prenoms, 3)
    langages_egaux = np.char.equal(lang1, lang2)
    lang_joined = np.char.join('-', lang1)
    
    EXERCICE BONUS - SOLUTIONS:
    temp_moyenne = np.mean(temperatures)
    temp_mediane = np.median(temperatures)
    temp_min = np.min(temperatures)
    temp_max = np.max(temperatures)
    temp_ecart_type = np.std(temperatures)
    temperatures_f = temperatures * 9/5 + 32
    seuil_chaud = temp_moyenne + temp_ecart_type
    jours_chauds = temperatures > seuil_chaud
    nb_jours_chauds = np.sum(jours_chauds)
    variation_saisonniere = np.sin(jours * 2 * np.pi / 365)
    temperatures_arrondies = np.round(temperatures, 1)
    indice_temp_min = np.argmin(temperatures)
    indice_temp_max = np.argmax(temperatures)
    """
    
    print(solutions)

# ===============================
# FONCTION PRINCIPALE
# ===============================

def main():
    """
    Lance tous les exercices NumPy complets
    """
    print("üéØ EXERCICES NUMPY COMPLETS üéØ")
    print("üìö R√©vision compl√®te du cours NumPy Operations")
    print("üí° Remplacez les 'None' et 'pass' par votre code")
    print("üìñ Tapez 'afficher_solutions()' pour voir les r√©ponses\n")
    
    # Lance tous les exercices
    exercice_1_operations_arithmetiques()
    exercice_2_fonctions_creation_manipulation()
    exercice_3_comparaison_logique()
    exercice_4_fonctions_mathematiques()
    exercice_5_constantes()
    exercice_6_statistiques()
    exercice_7_chaines_caracteres()
    exercice_bonus_projet_integre()
    
    print("\nüéâ Tous les exercices sont disponibles ! üéâ")
    print("üí° Pour voir les solutions, appelez: afficher_solutions()")

def solutions():
    """Raccourci pour afficher les solutions"""
    afficher_solutions()

if __name__ == "__main__":
    main()
