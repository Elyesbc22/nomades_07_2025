# Test file for Pandas Exercise
"""
Tests d'assertion pour l'exercice Pandas - Analyse de donn√©es avec les critiques de vins

Ce fichier contient des tests complets pour valider toutes les fonctions de l'exercice.
Ex√©cutez ce fichier pour v√©rifier que vos impl√©mentations sont correctes.
"""

import pandas as pd
import numpy as np
import sys
import os

# Ajouter le r√©pertoire parent au path pour importer ex.py
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Essayer d'importer les fonctions de l'exercice
try:
    from ex import *
    print("‚úÖ Import des fonctions de l'exercice r√©ussi")
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    print("Assurez-vous que le fichier ex.py est dans le m√™me r√©pertoire")
    sys.exit(1)


def create_comprehensive_test_dataset():
    """
    Cr√©e un dataset de test plus complet pour des tests robustes.
    """
    np.random.seed(42)  # Pour des r√©sultats reproductibles
    
    countries = ['France', 'Italy', 'Spain', 'US', 'Germany', 'Australia', 'Chile', 'Argentina']
    varieties = ['Chardonnay', 'Sangiovese', 'Tempranillo', 'Cabernet Sauvignon', 'Riesling', 'Pinot Noir', 'Merlot', 'Sauvignon Blanc']
    tasters = ['John Smith', 'Maria Rossi', 'Pierre Dubois', 'Anna Johnson', 'Klaus Weber', 'Sofia Garcia']
    
    # Cr√©er 50 vins pour des tests plus robustes
    data = {
        'country': np.random.choice(countries, 50),
        'description': [f'Description du vin {i}' for i in range(50)],
        'designation': [f'Designation {i}' for i in range(50)],
        'points': np.random.randint(80, 101, 50),  # Scores entre 80 et 100
        'price': np.concatenate([
            np.random.uniform(15, 80, 45),  # 45 vins avec prix
            [None] * 5  # 5 vins sans prix
        ]),
        'province': [f'Province {i}' for i in range(50)],
        'region_1': [f'Region {i}' for i in range(50)],
        'region_2': np.concatenate([
            [f'Sub-region {i}' for i in range(30)],  # 30 avec region_2
            [None] * 20  # 20 sans region_2
        ]),
        'taster_name': np.concatenate([
            np.random.choice(tasters, 45),  # 45 avec d√©gustateur
            [None] * 5  # 5 sans d√©gustateur
        ]),
        'taster_twitter_handle': [f'@taster{i}' if i < 45 else None for i in range(50)],
        'title': [f'Wine Title {i}' for i in range(50)],
        'variety': np.random.choice(varieties, 50),
        'winery': [f'Winery {i}' for i in range(50)]
    }
    
    # M√©langer les donn√©es
    df = pd.DataFrame(data)
    return df.sample(frac=1).reset_index(drop=True)


def test_with_real_csv_structure():
    """
    Teste avec une structure similaire au vrai dataset CSV de vins.
    """
    print("\nüç∑ Test avec structure CSV r√©aliste")
    
    # Donn√©es plus r√©alistes
    real_data = {
        'country': ['US', 'Spain', 'US', 'Spain', 'US', 'Spain', 'US', 'Spain'],
        'description': [
            'This tremendous 100% varietal wine hails from Oakville',
            'Ripe aromas of fig, blackberry and cassis',
            'Tart and snappy, the flavors of lime flesh and rind',
            'Pineapple rind, lemon pith and orange blossom',
            'Much like the regular bottling from 2012',
            'Blackberry and raspberry aromas show',
            'Soft, supple plum envelopes an oaky structure',
            'Balanced acidity and tannins frame'
        ],
        'designation': ['Martha\'s Vineyard', None, None, 'Ars In Vitro', None, None, 'Richard\'s Reserve', None],
        'points': [96, 86, 87, 87, 87, 87, 87, 87],
        'price': [235.0, 30.0, None, 65.0, None, 15.0, 60.0, None],
        'province': ['California', 'Northern Spain', 'Michigan', 'Northern Spain', 'Oregon', 'Northern Spain', 'Michigan', 'Northern Spain'],
        'region_1': ['Napa Valley', 'Toro', 'Lake Michigan Shore', 'Toro', 'Willamette Valley', 'Toro', 'Lake Michigan Shore', 'Toro'],
        'region_2': ['Oakville', None, None, None, 'Dundee Hills', None, None, None],
        'taster_name': ['Virginie Boone', 'Michael Schachner', 'Alexander Peartree', 'Michael Schachner', 'Paul Gregutt', 'Michael Schachner', 'Alexander Peartree', 'Michael Schachner'],
        'taster_twitter_handle': ['@vboone', '@wineschach', None, '@wineschach', '@paulgwine ', '@wineschach', None, '@wineschach'],
        'title': ['Heitz 2013 Martha\'s Vineyard Cabernet Sauvignon (Napa Valley)', 'Bodega Carmen Rodr√≠guez 2011 Traverse Creek Red (Toro)', 'Mackinaw Trail Winery 2014 Vignoles (Lake Michigan Shore)', 'Quinta de la Rosa 2012 Ars In Vitro Red (Toro)', 'Ponzi 2013 Reserve Pinot Noir (Willamette Valley)', 'Quinta de la Rosa 2011 Red (Toro)', 'Mackinaw Trail Winery 2014 Richard\'s Reserve Red (Lake Michigan Shore)', 'Quinta de la Rosa 2010 Red (Toro)'],
        'variety': ['Cabernet Sauvignon', 'Tinta de Toro', 'Vignoles', 'Tinta de Toro', 'Pinot Noir', 'Tinta de Toro', 'Blend', 'Tinta de Toro'],
        'winery': ['Heitz', 'Bodega Carmen Rodr√≠guez', 'Mackinaw Trail Winery', 'Quinta de la Rosa', 'Ponzi', 'Quinta de la Rosa', 'Mackinaw Trail Winery', 'Quinta de la Rosa']
    }
    
    real_df = pd.DataFrame(real_data)
    print(f"Dataset r√©aliste cr√©√©: {real_df.shape}")
    
    # Tests sp√©cifiques avec donn√©es r√©alistes
    try:
        # Test des statistiques avec des donn√©es r√©elles
        stats = wine_statistics(real_df)
        print(f"‚úÖ Statistiques calcul√©es: score moyen = {stats['avg_score']:.2f}")
        
        # Test de filtrage par pays
        us_data, count, avg_score, avg_price = analyze_country_data(real_df, 'US')
        print(f"‚úÖ Donn√©es US: {count} vins, score moyen = {avg_score:.2f}")
        
        # Test de cat√©gorisation des prix
        df_cat = create_price_categories(real_df)
        categories = df_cat['price_category'].value_counts()
        print(f"‚úÖ Cat√©gories de prix: {dict(categories)}")
        
    except Exception as e:
        print(f"‚ùå Test avec donn√©es r√©alistes √©chou√©: {e}")
    
    return real_df


def advanced_assertion_tests():
    """
    Tests d'assertion avanc√©s avec validation de types et valeurs.
    """
    print("\nüî¨ Tests d'assertion avanc√©s")
    
    test_df = create_comprehensive_test_dataset()
    
    # Test avanc√© 1: Validation des types de retour
    print("\n1Ô∏è‚É£ Validation des types de retour")
    try:
        # Test load_and_explore_data (simul√©)
        df, rows, cols, col_names = test_df, len(test_df), len(test_df.columns), list(test_df.columns)
        assert isinstance(df, pd.DataFrame), "DataFrame attendu"
        assert isinstance(rows, int), "Nombre de lignes doit √™tre un entier"
        assert isinstance(cols, int), "Nombre de colonnes doit √™tre un entier"
        assert isinstance(col_names, list), "Noms de colonnes doivent √™tre une liste"
        print("‚úÖ Types de retour valid√©s")
        
    except Exception as e:
        print(f"‚ùå Validation des types √©chou√©e: {e}")
    
    # Test avanc√© 2: Coh√©rence des donn√©es apr√®s transformation
    print("\n2Ô∏è‚É£ Coh√©rence des donn√©es apr√®s transformation")
    try:
        original_shape = test_df.shape
        df_transformed = create_price_categories(test_df)
        
        assert df_transformed.shape[0] == original_shape[0], "Nombre de lignes doit √™tre conserv√©"
        assert df_transformed.shape[1] == original_shape[1] + 1, "Une colonne doit √™tre ajout√©e"
        assert not df_transformed.equals(test_df), "Le DataFrame doit √™tre modifi√©"
        print("‚úÖ Coh√©rence des transformations valid√©e")
        
    except Exception as e:
        print(f"‚ùå Validation de coh√©rence √©chou√©e: {e}")
    
    # Test avanc√© 3: Gestion des valeurs manquantes
    print("\n3Ô∏è‚É£ Gestion des valeurs manquantes")
    try:
        original_nulls = test_df.isnull().sum().sum()
        df_clean = clean_missing_data(test_df)
        final_nulls = df_clean.isnull().sum().sum()
        
        assert final_nulls < original_nulls, "Le nettoyage doit r√©duire les valeurs manquantes"
        assert df_clean['price'].isnull().sum() == 0, "Prix ne doit plus avoir de valeurs manquantes"
        print(f"‚úÖ Valeurs manquantes r√©duites de {original_nulls} √† {final_nulls}")
        
    except Exception as e:
        print(f"‚ùå Validation du nettoyage √©chou√©e: {e}")
    
    # Test avanc√© 4: Validation des calculs statistiques
    print("\n4Ô∏è‚É£ Validation des calculs statistiques")
    try:
        stats = wine_statistics(test_df)
        
        # V√©rifications manuelles
        manual_avg = test_df['points'].mean()
        manual_median = test_df['price'].median()
        manual_countries = test_df['country'].nunique()
        
        assert abs(stats['avg_score'] - manual_avg) < 0.01, "Score moyen incorrect"
        assert abs(stats['median_price'] - manual_median) < 0.01, "Prix m√©dian incorrect"
        assert stats['unique_countries'] == manual_countries, "Nombre de pays incorrect"
        print("‚úÖ Calculs statistiques valid√©s")
        
    except Exception as e:
        print(f"‚ùå Validation des statistiques √©chou√©e: {e}")
    
    # Test avanc√© 5: Performance et m√©moire
    print("\n5Ô∏è‚É£ Tests de performance")
    try:
        import time
        
        # Test de performance sur groupement
        start_time = time.time()
        grouped = analyze_by_country_and_variety(test_df)
        end_time = time.time()
        
        assert end_time - start_time < 1.0, "Groupement trop lent"
        assert len(grouped) > 0, "Groupement doit retourner des r√©sultats"
        print(f"‚úÖ Groupement ex√©cut√© en {end_time - start_time:.3f}s")
        
    except Exception as e:
        print(f"‚ùå Test de performance √©chou√©: {e}")


def edge_cases_tests():
    """
    Tests des cas limites et situations particuli√®res.
    """
    print("\nüö® Tests des cas limites")
    
    # Dataset vide
    print("\nüìã Test avec DataFrame vide")
    try:
        empty_df = pd.DataFrame(columns=['country', 'points', 'price', 'variety', 'taster_name'])
        stats = wine_statistics(empty_df)
        print("‚úÖ Gestion du DataFrame vide valid√©e")
    except Exception as e:
        print(f"‚ö†Ô∏è DataFrame vide non g√©r√©: {e}")
    
    # Dataset avec une seule ligne
    print("\n1Ô∏è‚É£ Test avec une seule ligne")
    try:
        single_df = pd.DataFrame({
            'country': ['France'],
            'points': [95],
            'price': [50.0],
            'variety': ['Chardonnay'],
            'taster_name': ['John'],
            'region_2': [None],
            'winery': ['Test Winery'],
            'title': ['Test Wine'],
            'taster_twitter_handle': ['@john']
        })
        
        stats = wine_statistics(single_df)
        assert stats['avg_score'] == 95, "Score unique doit √™tre pr√©serv√©"
        print("‚úÖ Gestion d'une seule ligne valid√©e")
    except Exception as e:
        print(f"‚ö†Ô∏è Une seule ligne non g√©r√©e: {e}")
    
    # Dataset avec toutes les valeurs manquantes dans une colonne
    print("\n‚ùì Test avec colonne enti√®rement manquante")
    try:
        all_null_df = create_comprehensive_test_dataset()
        all_null_df['price'] = None
        
        cleaned = clean_missing_data(all_null_df)
        print("‚úÖ Gestion des colonnes enti√®rement nulles valid√©e")
    except Exception as e:
        print(f"‚ö†Ô∏è Colonnes enti√®rement nulles non g√©r√©es: {e}")


if __name__ == "__main__":
    print("=" * 60)
    print("üß™ TESTS COMPLETS POUR L'EXERCICE PANDAS")
    print("=" * 60)
    
    # Tests de base
    print("\nüìä Cr√©ation du dataset de test...")
    test_df = create_comprehensive_test_dataset()
    print(f"Dataset cr√©√©: {test_df.shape[0]} lignes, {test_df.shape[1]} colonnes")
    
    # Ex√©cuter tous les tests
    try:
        print("\nüîß Ex√©cution des tests d'assertion de base...")
        run_assertion_tests()
        
        print("\nüç∑ Tests avec structure CSV r√©aliste...")
        real_df = test_with_real_csv_structure()
        
        print("\nüî¨ Tests d'assertion avanc√©s...")
        advanced_assertion_tests()
        
        print("\nüö® Tests des cas limites...")
        edge_cases_tests()
        
    except NameError as e:
        print(f"\n‚ùå Erreur: {e}")
        print("Certaines fonctions ne sont pas encore impl√©ment√©es.")
        print("Compl√©tez les fonctions dans ex.py pour ex√©cuter tous les tests.")
    
    print("\n" + "=" * 60)
    print("üéØ R√âSUM√â DES TESTS")
    print("=" * 60)
    print("‚úÖ Tests basiques: Validation des fonctionnalit√©s de base")
    print("üç∑ Tests r√©alistes: Validation avec donn√©es similaires au vrai dataset")
    print("üî¨ Tests avanc√©s: Validation de la robustesse et performance")
    print("üö® Tests limites: Validation des cas particuliers")
    print("\nüí° Assurez-vous que toutes les fonctions TODO sont impl√©ment√©es!")
    print("üöÄ Une fois tous les tests pass√©s, votre exercice est termin√©!")
